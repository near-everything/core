export const SummaryWidget =
  'const data = props.data; const Card = styled.div` height: 125px; background-color: white; padding: 12px; margin: 8px; border-radius: 22px; box-shadow: 5px 5px 5px gray; border: solid gray; `; const Icon = styled.div` height: 24px; width: 24px; `; const Body = styled.div` margin-left: 12px; display: flex; flex-direction: column; justify-content: space-between; `; const Content = styled.div` display: flex; flex-direction: column; gap: 4px; `; return ( <Card> <div className="d-flex flex-row h-100"> <Icon> {SVG} </Icon> <Body> <Content>{DATA}</Content> </Body> </div> </Card> );';
export const ViewWidget =
  'const data = props.data; const Card = styled.div` height: 125px; background-color: white; padding: 12px; margin: 8px; border-radius: 22px; box-shadow: 5px 5px 5px gray; border: solid gray; `; const Icon = styled.div` height: 24px; width: 24px; `; const Body = styled.div` margin-left: 12px; display: flex; flex-direction: column; justify-content: space-between; `; const Content = styled.div` display: flex; flex-direction: column; gap: 4px; `; return ( <Card> <div className="d-flex flex-row h-100"> <Icon> {SVG} </Icon> <Body> <Content>{DATA}</Content> </Body> </div> </Card> );';
export const CreateWidget =
  'const Header = styled.div` width: 100%; display: flex; flex-direction: row; justify-content: space-between; align-items: center; `; const Title = styled.div` font-size: 24px; line-height: 33.6px; `; const Form = styled.div` display: flex; flex-direction: column; gap: 4px; `; const Input = styled.input` width: 100%; `; const TextArea = styled.textarea` width: 100%; `; const ButtonRow = styled.div` display: flex; flex-direction: row; gap: 4px; `; const typeStr = "TYPE_STR"; const type = Type.get(typeStr); State.init(PROPERTIES); function composeData() { const data = { thing: { main: JSON.stringify(state), }, index: { VERSION: JSON.stringify({ key: "main", value: { type: typeStr, }, }), }, }; return data; } return ( <> <Header> <Title>{typeStr.split("/")[2]}</Title> </Header> <Form>{FORM_BODY}<ButtonRow> <CommitButton force data={composeData} onCommit={resetThing} > create </CommitButton> </ButtonRow> </Form> </> );';
