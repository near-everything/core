export const ViewWidget =
  'const data = props.data;\n\nconst Card = styled.div`\n    height: 125px;\n    background-color: white;\n    padding: 12px;\n    margin: 8px;\n    border-radius: 22px;\n    box-shadow: 5px 5px 5px gray;\n    border: solid gray;\n`;\n\nconst Icon = styled.div`\n    height: 24px;\n    width: 24px;\n`;\n\nconst Body = styled.div`\n    margin-left: 12px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n`;\n\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n`;\n\nconst Title = styled.div`\n    max-height: 56px;\n    font-size: 20px;\n    line-height: 28px;\n    overflow: hidden;\n    position: relative;\n    text-overflow: ellipsis;\n    white-space: normal;\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n`;\n\nconst Preview = styled.div`\n    font-size: 16px;\n    line-height: 20.8px;\n    color: #A6A6A6;\n    overflow: hidden;\n    position: relative;\n    text-overflow: ellipsis;\n    white-space: normal;\n    display: -webkit-box;\n    -webkit-line-clamp: 1;\n    -webkit-box-orient: vertical;\n`;\n\nconst Caption = styled.div`\n    font-size: 12px;\n    line-height: 15.6px;\n    color: #A6A6A6;\n`;\n\nconst formatDate = (dateString) => {\n  const date = new Date(dateString);\n  const day = date.getDate().toString().padStart(2, "0");\n  const month = (date.getMonth() + 1).toString().padStart(2, "0");\n  const year = date.getFullYear().toString();\n  return `${day}.${month}.${year}`;\n};\n\nreturn (\n  <Card>\n    <div className="d-flex flex-row h-100">\n      <Icon>\n        <svg\n          width="24"\n          height="24"\n          viewBox="0 0 24 24"\n          fill="none"\n          xmlns="http://www.w3.org/2000/svg"\n        >\n          <path\n            d="M15.26 22C15.2 22 15.13 21.99 15.07 21.97C13.06 21.4 10.95 21.4 8.94003 21.97C8.57003 22.07 8.18003 21.86 8.08003 21.49C7.97003 21.12 8.19003 20.73 8.56003 20.63C10.82 19.99 13.2 19.99 15.46 20.63C15.83 20.74 16.05 21.12 15.94 21.49C15.84 21.8 15.56 22 15.26 22Z"\n            fill="#292D32"\n          />\n          <path\n            d="M19.21 6.36001C18.17 4.26001 16.16 2.71001 13.83 2.20001C11.39 1.66001 8.88997 2.24001 6.97997 3.78001C5.05997 5.31001 3.96997 7.60001 3.96997 10.05C3.96997 12.64 5.51997 15.35 7.85997 16.92V17.75C7.84997 18.03 7.83997 18.46 8.17997 18.81C8.52997 19.17 9.04997 19.21 9.45997 19.21H14.59C15.13 19.21 15.54 19.06 15.82 18.78C16.2 18.39 16.19 17.89 16.18 17.62V16.92C19.28 14.83 21.23 10.42 19.21 6.36001ZM13.72 11.62L12.65 13.48C12.51 13.72 12.26 13.86 12 13.86C11.87 13.86 11.74 13.83 11.63 13.76C11.27 13.55 11.15 13.09 11.35 12.74L12.2 11.26H11.36C10.86 11.26 10.45 11.04 10.23 10.67C10.01 10.29 10.03 9.83001 10.28 9.39001L11.35 7.53001C11.56 7.17001 12.02 7.05001 12.37 7.25001C12.73 7.46001 12.85 7.92001 12.65 8.27001L11.8 9.75001H12.64C13.14 9.75001 13.55 9.97001 13.77 10.34C13.99 10.72 13.97 11.19 13.72 11.62Z"\n            fill="#292D32"\n          />\n        </svg>\n      </Icon>\n      <Body>\n        <Content>\n          <Title>{data.name}</Title>\n          <Preview>\n            <Markdown text={data.description.md} />\n          </Preview>\n        </Content>\n        <Caption>{formatDate(data.creationDate)}</Caption>\n      </Body>\n    </div>\n  </Card>\n);\n';

  export const CreateWidget = 
  'const API_URL = "https://monkfish-app-ginhc.ondigitalocean.app/graphql"; State.init({ widget: "efiz.testnet/widget/View.Idea", title: "", description: "", res: null, }); const createThing = () => { asyncFetch(API_URL, { method: "POST", headers: { "Content-Type": "application/json", }, body: JSON.stringify({ query: ` mutation CreateIdea($type: String, $title: String, $widget: String) { things { create(name: $widget, type: {name: {is: $type}}) { message } addIdea(name: $title) { entities { id } } } } `, variables: { type: "idea", title: state.title, widget: state.widget, }, }), }).then((res) => { // Catch if there is an error const ideaId = res.body.data?.things?.addIdea.entities[0].id; appendDescription(ideaId); }); }; const appendDescription = (ideaId) => { asyncFetch(API_URL, { method: "POST", headers: { "Content-Type": "application/json", }, body: JSON.stringify({ query: ` mutation AppendDescription($ideaId: ID, $description: String) { ideas(id: {is: $ideaId}) { appendContentToDescription(value: $description) { message } } } `, variables: { ideaId: ideaId, description: state.description, }, }), }).then((res) => { State.update({ res: res, }); }); }; const resetThing = () => { State.update({ title: "", description: "", res: null, }); }; const Header = styled.div` width: 100%; display: flex; flex-direction: row; justify-content: space-between; align-items: center; `; const Title = styled.div` font-size: 24px; line-height: 33.6px; `; const Form = styled.div` display: flex; flex-direction: column; gap: 4px; `; const Input = styled.input` width: 100%; `; const TextArea = styled.textarea` width: 100%; `; const ButtonRow = styled.div` display: flex; flex-direction: row; gap: 4px; `; const Button = styled.button` padding: 8px 20px; max-width: 90px; `; const Caption = styled.div` font-size: 12px; line-height: 15.6px; color: #A6A6A6; `; return ( <> <Header> <Title>idea</Title> </Header> <Form> {state.res?.ok ? ( <>Successfully uploaded!</> ) : ( <> <Input value={state.title} placeholder={"title"} onChange={({ target }) => State.update({ title: target.value })} /> <TextArea value={state.description} onInput={({ target }) => State.update({ description: target.value }) } placeholder={"description, markdown supported"} /> </> )} <ButtonRow> {state.res === null ? ( <Button onClick={createThing}>create</Button> ) : null} <Button onClick={resetThing}>reset</Button> </ButtonRow> </Form> </> );'